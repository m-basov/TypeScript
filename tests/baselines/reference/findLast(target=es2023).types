=== tests/cases/compiler/findLast.ts ===
[0].findLast((item) => item === 0);
>[0].findLast((item) => item === 0) : number
>[0].findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>[0] : number[]
>0 : 0
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Int8Array().findLast((item) => item === 0);
>new Int8Array().findLast((item) => item === 0) : number
>new Int8Array().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Int8Array() : Int8Array
>Int8Array : Int8ArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Uint8Array().findLast((item) => item === 0);
>new Uint8Array().findLast((item) => item === 0) : number
>new Uint8Array().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Uint8Array() : Uint8Array
>Uint8Array : Uint8ArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Uint8ClampedArray().findLast((item) => item === 0);
>new Uint8ClampedArray().findLast((item) => item === 0) : number
>new Uint8ClampedArray().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Uint8ClampedArray() : Uint8ClampedArray
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Int16Array().findLast((item) => item === 0);
>new Int16Array().findLast((item) => item === 0) : number
>new Int16Array().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Int16Array() : Int16Array
>Int16Array : Int16ArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Uint16Array().findLast((item) => item === 0);
>new Uint16Array().findLast((item) => item === 0) : number
>new Uint16Array().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Uint16Array() : Uint16Array
>Uint16Array : Uint16ArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Int32Array().findLast((item) => item === 0);
>new Int32Array().findLast((item) => item === 0) : number
>new Int32Array().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Int32Array() : Int32Array
>Int32Array : Int32ArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Uint32Array().findLast((item) => item === 0);
>new Uint32Array().findLast((item) => item === 0) : number
>new Uint32Array().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Uint32Array() : Uint32Array
>Uint32Array : Uint32ArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Float32Array().findLast((item) => item === 0);
>new Float32Array().findLast((item) => item === 0) : number
>new Float32Array().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Float32Array() : Float32Array
>Float32Array : Float32ArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Float64Array().findLast((item) => item === 0);
>new Float64Array().findLast((item) => item === 0) : number
>new Float64Array().findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>new Float64Array() : Float64Array
>Float64Array : Float64ArrayConstructor
>findLast : { <S extends number>(predicate: (this: void, value: number, index: number, obj: readonly number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any): number; }
>(item) => item === 0 : (this: void, item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new BigInt64Array().findLast((item) => item === BigInt(0));
>new BigInt64Array().findLast((item) => item === BigInt(0)) : bigint
>new BigInt64Array().findLast : { <S extends bigint>(predicate: (this: void, value: bigint, index: number, obj: readonly bigint[]) => value is S, thisArg?: any): S; (predicate: (value: bigint, index: number, obj: readonly bigint[]) => unknown, thisArg?: any): bigint; }
>new BigInt64Array() : BigInt64Array
>BigInt64Array : BigInt64ArrayConstructor
>findLast : { <S extends bigint>(predicate: (this: void, value: bigint, index: number, obj: readonly bigint[]) => value is S, thisArg?: any): S; (predicate: (value: bigint, index: number, obj: readonly bigint[]) => unknown, thisArg?: any): bigint; }
>(item) => item === BigInt(0) : (this: void, item: bigint) => boolean
>item : bigint
>item === BigInt(0) : boolean
>item : bigint
>BigInt(0) : bigint
>BigInt : BigIntConstructor
>0 : 0

new BigUint64Array().findLast((item) => item === BigInt(0));
>new BigUint64Array().findLast((item) => item === BigInt(0)) : bigint
>new BigUint64Array().findLast : { <S extends bigint>(predicate: (this: void, value: bigint, index: number, obj: readonly bigint[]) => value is S, thisArg?: any): S; (predicate: (value: bigint, index: number, obj: readonly bigint[]) => unknown, thisArg?: any): bigint; }
>new BigUint64Array() : BigUint64Array
>BigUint64Array : BigUint64ArrayConstructor
>findLast : { <S extends bigint>(predicate: (this: void, value: bigint, index: number, obj: readonly bigint[]) => value is S, thisArg?: any): S; (predicate: (value: bigint, index: number, obj: readonly bigint[]) => unknown, thisArg?: any): bigint; }
>(item) => item === BigInt(0) : (this: void, item: bigint) => boolean
>item : bigint
>item === BigInt(0) : boolean
>item : bigint
>BigInt(0) : bigint
>BigInt : BigIntConstructor
>0 : 0

[0].findLastIndex((item) => item === 0);
>[0].findLastIndex((item) => item === 0) : number
>[0].findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>[0] : number[]
>0 : 0
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Int8Array().findLastIndex((item) => item === 0);
>new Int8Array().findLastIndex((item) => item === 0) : number
>new Int8Array().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Int8Array() : Int8Array
>Int8Array : Int8ArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Uint8Array().findLastIndex((item) => item === 0);
>new Uint8Array().findLastIndex((item) => item === 0) : number
>new Uint8Array().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Uint8Array() : Uint8Array
>Uint8Array : Uint8ArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Uint8ClampedArray().findLastIndex((item) => item === 0);
>new Uint8ClampedArray().findLastIndex((item) => item === 0) : number
>new Uint8ClampedArray().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Uint8ClampedArray() : Uint8ClampedArray
>Uint8ClampedArray : Uint8ClampedArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Int16Array().findLastIndex((item) => item === 0);
>new Int16Array().findLastIndex((item) => item === 0) : number
>new Int16Array().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Int16Array() : Int16Array
>Int16Array : Int16ArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Uint16Array().findLastIndex((item) => item === 0);
>new Uint16Array().findLastIndex((item) => item === 0) : number
>new Uint16Array().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Uint16Array() : Uint16Array
>Uint16Array : Uint16ArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Int32Array().findLastIndex((item) => item === 0);
>new Int32Array().findLastIndex((item) => item === 0) : number
>new Int32Array().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Int32Array() : Int32Array
>Int32Array : Int32ArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Uint32Array().findLastIndex((item) => item === 0);
>new Uint32Array().findLastIndex((item) => item === 0) : number
>new Uint32Array().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Uint32Array() : Uint32Array
>Uint32Array : Uint32ArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Float32Array().findLastIndex((item) => item === 0);
>new Float32Array().findLastIndex((item) => item === 0) : number
>new Float32Array().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Float32Array() : Float32Array
>Float32Array : Float32ArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new Float64Array().findLastIndex((item) => item === 0);
>new Float64Array().findLastIndex((item) => item === 0) : number
>new Float64Array().findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>new Float64Array() : Float64Array
>Float64Array : Float64ArrayConstructor
>findLastIndex : (predicate: (value: number, index: number, obj: readonly number[]) => unknown, thisArg?: any) => number
>(item) => item === 0 : (item: number) => boolean
>item : number
>item === 0 : boolean
>item : number
>0 : 0

new BigInt64Array().findLastIndex((item) => item === BigInt(0));
>new BigInt64Array().findLastIndex((item) => item === BigInt(0)) : number
>new BigInt64Array().findLastIndex : (predicate: (value: bigint, index: number, obj: readonly bigint[]) => unknown, thisArg?: any) => number
>new BigInt64Array() : BigInt64Array
>BigInt64Array : BigInt64ArrayConstructor
>findLastIndex : (predicate: (value: bigint, index: number, obj: readonly bigint[]) => unknown, thisArg?: any) => number
>(item) => item === BigInt(0) : (item: bigint) => boolean
>item : bigint
>item === BigInt(0) : boolean
>item : bigint
>BigInt(0) : bigint
>BigInt : BigIntConstructor
>0 : 0

new BigUint64Array().findLastIndex((item) => item === BigInt(0));
>new BigUint64Array().findLastIndex((item) => item === BigInt(0)) : number
>new BigUint64Array().findLastIndex : (predicate: (value: bigint, index: number, obj: readonly bigint[]) => unknown, thisArg?: any) => number
>new BigUint64Array() : BigUint64Array
>BigUint64Array : BigUint64ArrayConstructor
>findLastIndex : (predicate: (value: bigint, index: number, obj: readonly bigint[]) => unknown, thisArg?: any) => number
>(item) => item === BigInt(0) : (item: bigint) => boolean
>item : bigint
>item === BigInt(0) : boolean
>item : bigint
>BigInt(0) : bigint
>BigInt : BigIntConstructor
>0 : 0

